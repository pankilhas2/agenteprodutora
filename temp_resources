"use client"

import type React from "react"

import { useState, useEffect } from "react"
import { Badge } from "@/components/ui/badge"
import { ImageUpload } from "@/components/image-upload"
import { FileUpload } from "@/components/file-upload"
import { Button } from "@/components/ui/button"
import { Card, CardContent, CardDescription, CardHeader, CardTitle } from "@/components/ui/card"
import { Input } from "@/components/ui/input"
import { Textarea } from "@/components/ui/textarea"
import { Select, SelectContent, SelectItem, SelectTrigger, SelectValue } from "@/components/ui/select"
import { Switch } from "@/components/ui/switch"
import { Label } from "@/components/ui/label"
import { Tabs, TabsContent, TabsList, TabsTrigger } from "@/components/ui/tabs"
import {
  Loader2,
  Plus,
  Trash2,
  Save,
  ArrowLeft,
  FileText,
  ShoppingBag,
  BarChart,
  Download,
  Eye,
  FileAudio,
  GraduationCapIcon as Graduation,
  Star,
  File,
  LogOut,
} from "lucide-react"
import { useToast } from "@/components/ui/use-toast"
import { supabase } from "@/lib/supabase"
import type { Product } from "@/lib/supabase"
import Link from "next/link"
import { isAuthenticated, logout } from "@/lib/auth"
import { AdminLogin } from "@/components/admin-login"

// Estender o tipo Product para incluir informações de arquivo digital
interface ExtendedProduct extends Product {
  file_name?: string
  file_size?: string
  download_count?: number
}

export default function AdminPage() {
  const [produtos, setProdutos] = useState<ExtendedProduct[]>([])
  const [isLoading, setIsLoading] = useState(true)
  const [activeTab, setActiveTab] = useState("lista")
  const [activeSection, setActiveSection] = useState("produtos")
  const [formData, setFormData] = useState<Omit<ExtendedProduct, "id" | "created_at">>({
    name: "",
    description: "",
    price: 0,
    image_url: "",
    download_url: "",
    category: "",
    featured: false,
    file_name: "",
  })
  const [editingId, setEditingId] = useState<number | null>(null)
  const [stats, setStats] = useState({
    totalProducts: 0,
    totalDownloads: 0,
    featuredProducts: 0,
    categories: {} as Record<string, number>,
  })
  const [isAuth, setIsAuth] = useState(false)
  const { toast } = useToast()

  // Verificar autenticação ao carregar a página
  useEffect(() => {
    const checkAuth = () => {
      const auth = isAuthenticated()
      setIsAuth(auth)

      if (auth) {
        fetchProdutos()
      } else {
        setIsLoading(false)
      }
    }

    checkAuth()
  }, [])

  // Calcular estatísticas
  useEffect(() => {
    if (produtos.length > 0) {
      const categories: Record<string, number> = {}
      let totalDownloads = 0

      produtos.forEach((produto) => {
        // Contar por categoria
        if (produto.category) {
          categories[produto.category] = (categories[produto.category] || 0) + 1
        }

        // Somar downloads
        totalDownloads += produto.download_count || 0
      })

      setStats({
        totalProducts: produtos.length,
        totalDownloads,
        featuredProducts: produtos.filter((p) => p.featured).length,
        categories,
      })
    }
  }, [produtos])

  const fetchProdutos = async () => {
    setIsLoading(true)
    try {
      const { data, error } = await supabase.from("products").select("*").order("created_at", { ascending: false })

      if (error) {
        throw error
      }

      if (data) {
        // Adicionar campos simulados para demonstração
        const extendedData = data.map((produto) => ({
          ...produto,
          file_name: produto.download_url.split("/").pop() || "arquivo.pdf",
          file_size: Math.floor(Math.random() * 10) + 1 + " MB",
          download_count: Math.floor(Math.random() * 100),
        }))

        setProdutos(extendedData as ExtendedProduct[])
      }
    } catch (error) {
      console.error("Erro ao carregar produtos:", error)
      toast({
        title: "Erro",
        description: "Não foi possível carregar os produtos.",
        variant: "destructive",
      })
    } finally {
      setIsLoading(false)
    }
  }

  const handleInputChange = (e: React.ChangeEvent<HTMLInputElement | HTMLTextAreaElement>) => {
    const { name, value } = e.target
    setFormData((prev) => ({ ...prev, [name]: value }))
  }

  const handleSelectChange = (value: string) => {
    setFormData((prev) => ({ ...prev, category: value }))
  }

  const handleSwitchChange = (checked: boolean) => {
    setFormData((prev) => ({ ...prev, featured: checked }))
  }

  const handleSubmit = async (e: React.FormEvent) => {
    e.preventDefault()

    try {
      if (editingId) {
        // Atualizar produto existente
        const { error } = await supabase.from("products").update(formData).eq("id", editingId)

        if (error) throw error

        toast({
          title: "Sucesso",
          description: "Produto atualizado com sucesso!",
        })
      } else {
        // Criar novo produto
        const { error } = await supabase.from("products").insert(formData)

        if (error) throw error

        toast({
          title: "Sucesso",
          description: "Produto adicionado com sucesso!",
        })
      }

      // Resetar formulário e recarregar produtos
      resetForm()
      fetchProdutos()
      setActiveTab("lista")
    } catch (error) {
      console.error("Erro ao salvar produto:", error)
      toast({
        title: "Erro",
        description: "Não foi possível salvar o produto.",
        variant: "destructive",
      })
    }
  }

  const handleEdit = (produto: ExtendedProduct) => {
    setFormData({
      name: produto.name,
      description: produto.description,
      price: Number(produto.price),
      image_url: produto.image_url,
      download_url: produto.download_url,
      category: produto.category,
      featured: produto.featured,
      file_name: produto.file_name,
    })
    setEditingId(produto.id)
    setActiveTab("adicionar")
  }

  const handleDelete = async (id: number) => {
    if (!confirm("Tem certeza que deseja excluir este produto?")) return

    try {
      const { error } = await supabase.from("products").delete().eq("id", id)

      if (error) throw error

      toast({
        title: "Sucesso",
        description: "Produto excluído com sucesso!",
      })

      fetchProdutos()
    } catch (error) {
      console.error("Erro ao excluir produto:", error)
      toast({
        title: "Erro",
        description: "Não foi possível excluir o produto.",
        variant: "destructive",
      })
    }
  }

  const resetForm = () => {
    setFormData({
      name: "",
      description: "",
      price: 0,
      image_url: "",
      download_url: "",
      category: "",
      featured: false,
      file_name: "",
    })
    setEditingId(null)
  }

  const handleFileUploadComplete = (url: string, fileName: string) => {
    setFormData((prev) => ({
      ...prev,
      download_url: url,
      file_name: fileName,
    }))
  }

  const handleLogout = () => {
    logout()
    setIsAuth(false)
    toast({
      title: "Logout realizado",
      description: "Você saiu do painel de administração.",
    })
  }

  // Função para obter o ícone da categoria
  const getCategoryIcon = (category: string) => {
    switch (category.toLowerCase()) {
      case "ebook":
        return <FileText className="h-4 w-4" />
      case "audio":
        return <FileAudio className="h-4 w-4" />
      case "curso":
        return <Graduation className="h-4 w-4" />
      default:
        return <File className="h-4 w-4" />
    }
  }

  // Se não estiver autenticado, mostrar tela de login
  if (!isAuth) {
    return <AdminLogin onLoginSuccess={() => setIsAuth(true)} />
  }

  return (
    <main className="min-h-screen py-12">
      <div className="container mx-auto px-4">
        <div className="flex justify-between items-center mb-8">
          <h1 className="text-3xl font-bold bg-clip-text text-transparent bg-gradient-to-r from-purple-400 to-blue-400">
            Painel de Administração
          </h1>
          <div className="flex gap-2">
            <Button variant="outline" className="border-white/10 text-white hover:bg-white/10" onClick={handleLogout}>
              <LogOut className="mr-2 h-4 w-4" />
              Sair
            </Button>
            <Link href="/">
              <Button variant="outline" className="border-white/10 text-white hover:bg-white/10">
                <ArrowLeft className="mr-2 h-4 w-4" />
                Voltar para o site
              </Button>
            </Link>
          </div>
        </div>

        <div className="grid grid-cols-1 md:grid-cols-4 gap-6 mb-8">
          <Card className="border-white/10 bg-black/30 backdrop-blur-sm overflow-hidden">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-white/70">Total de Produtos</p>
                  <h3 className="text-2xl font-bold text-white">{stats.totalProducts}</h3>
                </div>
                <div className="w-12 h-12 rounded-lg bg-purple-500/20 flex items-center justify-center">
                  <ShoppingBag className="h-6 w-6 text-purple-400" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="border-white/10 bg-black/30 backdrop-blur-sm overflow-hidden">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-white/70">Downloads</p>
                  <h3 className="text-2xl font-bold text-white">{stats.totalDownloads}</h3>
                </div>
                <div className="w-12 h-12 rounded-lg bg-blue-500/20 flex items-center justify-center">
                  <Download className="h-6 w-6 text-blue-400" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="border-white/10 bg-black/30 backdrop-blur-sm overflow-hidden">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-white/70">Produtos em Destaque</p>
                  <h3 className="text-2xl font-bold text-white">{stats.featuredProducts}</h3>
                </div>
                <div className="w-12 h-12 rounded-lg bg-amber-500/20 flex items-center justify-center">
                  <Star className="h-6 w-6 text-amber-400" />
                </div>
              </div>
            </CardContent>
          </Card>

          <Card className="border-white/10 bg-black/30 backdrop-blur-sm overflow-hidden">
            <CardContent className="p-6">
              <div className="flex items-center justify-between">
                <div>
                  <p className="text-sm text-white/70">Categorias</p>
                  <h3 className="text-2xl font-bold text-white">{Object.keys(stats.categories).length}</h3>
                </div>
                <div className="w-12 h-12 rounded-lg bg-green-500/20 flex items-center justify-center">
                  <BarChart className="h-6 w-6 text-green-400" />
                </div>
              </div>
            </CardContent>
          </Card>
        </div>

        <div className="flex mb-6">
          <Button
            variant={activeSection === "produtos" ? "default" : "outline"}
            className={
              activeSection === "produtos"
                ? "bg-gradient-to-r from-purple-600 to-blue-500 mr-2"
                : "border-white/10 text-white hover:bg-white/10 mr-2"
            }
            onClick={() => setActiveSection("produtos")}
          >
            <ShoppingBag className="mr-2 h-4 w-4" />
            Produtos
          </Button>
          <Button
            variant={activeSection === "estatisticas" ? "default" : "outline"}
            className={
              activeSection === "estatisticas"
                ? "bg-gradient-to-r from-purple-600 to-blue-500"
                : "border-white/10 text-white hover:bg-white/10"
            }
            onClick={() => setActiveSection("estatisticas")}
          >
            <BarChart className="mr-2 h-4 w-4" />
            Estatísticas
          </Button>
        </div>

        {activeSection === "produtos" ? (
          <Card className="border-white/10 bg-black/30 backdrop-blur-sm overflow-hidden">
            <CardHeader>
              <CardTitle className="text-white">Gerenciar Produtos</CardTitle>
              <CardDescription className="text-white/70">
                Adicione, edite ou remova produtos da Loja PANK
              </CardDescription>
            </CardHeader>
            <CardContent>
              <Tabs value={activeTab} onValueChange={setActiveTab}>
                <TabsList className="bg-black/20 mb-6">
                  <TabsTrigger value="lista">Lista de Produtos</TabsTrigger>
                  <TabsTrigger value="adicionar">{editingId ? "Editar Produto" : "Adicionar Produto"}</TabsTrigger>
                </TabsList>

                <TabsContent value="lista">
                  {isLoading ? (
                    <div className="flex justify-center items-center py-12">
                      <Loader2 className="h-8 w-8 text-purple-400 animate-spin" />
                    </div>
                  ) : (
                    <>
                      <div className="flex justify-end mb-4">
                        <Button
                          onClick={() => {
                            resetForm()
                            setActiveTab("adicionar")
                          }}
                          className="bg-gradient-to-r from-purple-600 to-blue-500 hover:from-purple-700 hover:to-blue-600 text-white"
                        >
                          <Plus className="mr-2 h-4 w-4" />
                          Novo Produto
                        </Button>
                      </div>

                      {produtos.length > 0 ? (
                        <div className="space-y-4">
                          {produtos.map((produto) => (
                            <Card key={produto.id} className="border-white/10 bg-black/20">
                              <CardContent className="p-4">
                                <div className="flex flex-col md:flex-row gap-4">
                                  <div className="w-full md:w-24 h-24 flex-shrink-0">
                                    <img
                                      src={produto.image_url || "/placeholder.svg?height=100&width=100"}
                                      alt={produto.name}
                                      className="w-full h-full object-cover rounded-md"
                                    />
                                  </div>
                                  <div className="flex-1">
                                    <div className="flex justify-between items-start">
                                      <div>
                                        <h3 className="font-medium text-white">{produto.name}</h3>
                                        <p className="text-sm text-white/70 line-clamp-2">{produto.description}</p>
                                        <div className="flex items-center gap-2 mt-1">
                                          <Badge
                                            variant="outline"
                                            className="text-xs border-white/20 text-white flex items-center gap-1"
                                          >
                                            {getCategoryIcon(produto.category)}
                                            {produto.category}
                                          </Badge>
                                          <span className="text-sm font-medium text-transparent bg-clip-text bg-gradient-to-r from-green-400 to-blue-400">
                                            {Number(produto.price) === 0
                                              ? "GRÁTIS"
                                              : `R$ ${Number(produto.price).toFixed(2)}`}
                                          </span>
                                          {produto.featured && (
                                            <Badge className="text-xs bg-gradient-to-r from-purple-600 to-blue-500">
                                              Destaque
                                            </Badge>
                                          )}
                                        </div>
                                        <div className="flex items-center gap-2 mt-2">
                                          <Badge
                                            variant="outline"
                                            className="text-xs border-white/20 text-white/70 flex items-center gap-1"
                                          >
                                            <FileText className="h-3 w-3" />
                                            {produto.file_name}
                                          </Badge>
                                          <Badge
                                            variant="outline"
                                            className="text-xs border-white/20 text-white/70 flex items-center gap-1"
                                          >
                                            <Download className="h-3 w-3" />
                                            {produto.download_count} downloads
                                          </Badge>
                                        </div>
                                      </div>
                                      <div className="flex gap-2">
                                        <Button
                                          variant="outline"
                                          size="sm"
                                          className="border-white/10 text-white hover:bg-white/10"
                                          onClick={() => handleEdit(produto)}
                                        >
                                          Editar
                                        </Button>
                                        <Button
                                          variant="outline"
                                          size="sm"
                                          className="border-white/10 text-white hover:bg-white/10"
                                          onClick={() => window.open(produto.download_url, "_blank")}
                                        >
                                          <Eye className="h-4 w-4" />
                                        </Button>
                                        <Button
                                          variant="destructive"
                                          size="sm"
                                          onClick={() => handleDelete(produto.id)}
                                        >
                                          <Trash2 className="h-4 w-4" />
                                        </Button>
                                      </div>
                                    </div>
                                  </div>
                                </div>
                              </CardContent>
                            </Card>
                          ))}
                        </div>
                      ) : (
                        <div className="text-center py-12">
                          <p className="text-white/70">Nenhum produto cadastrado.</p>
                          <Button
                            onClick={() => setActiveTab("adicionar")}
                            className="mt-4 bg-gradient-to-r from-purple-600 to-blue-500 hover:from-purple-700 hover:to-blue-600 text-white"
                          >
                            <Plus className="mr-2 h-4 w-4" />
                            Adicionar Produto
                          </Button>
                        </div>
                      )}
                    </>
                  )}
                </TabsContent>

                <TabsContent value="adicionar">
                  <form onSubmit={handleSubmit} className="space-y-6">
                    <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                      <div className="space-y-4">
                        <div className="space-y-2">
                          <Label htmlFor="name" className="text-white">
                            Nome do Produto
                          </Label>
                          <Input
                            id="name"
                            name="name"
                            value={formData.name}
                            onChange={handleInputChange}
                            placeholder="Ex: Ebook: Introdução à IA"
                            required
                            className="bg-black/20 border-white/10 text-white"
                          />
                        </div>

                        <div className="space-y-2">
                          <Label htmlFor="description" className="text-white">
                            Descrição
                          </Label>
                          <Textarea
                            id="description"
                            name="description"
                            value={formData.description}
                            onChange={handleInputChange}
                            placeholder="Descreva o produto..."
                            required
                            className="bg-black/20 border-white/10 text-white min-h-[100px]"
                          />
                        </div>

                        <div className="space-y-2">
                          <Label htmlFor="category" className="text-white">
                            Categoria
                          </Label>
                          <Select value={formData.category} onValueChange={handleSelectChange} required>
                            <SelectTrigger className="bg-black/20 border-white/10 text-white">
                              <SelectValue placeholder="Selecione uma categoria" />
                            </SelectTrigger>
                            <SelectContent className="bg-black/90 border-white/10 text-white">
                              <SelectItem value="ebook">Ebook</SelectItem>
                              <SelectItem value="audio">Áudio</SelectItem>
                              <SelectItem value="curso">Curso</SelectItem>
                              <SelectItem value="template">Template</SelectItem>
                              <SelectItem value="software">Software</SelectItem>
                            </SelectContent>
                          </Select>
                        </div>

                        <div className="space-y-2">
                          <Label htmlFor="price" className="text-white">
                            Preço (R$)
                          </Label>
                          <Input
                            id="price"
                            name="price"
                            type="number"
                            step="0.01"
                            min="0"
                            value={formData.price}
                            onChange={handleInputChange}
                            placeholder="0.00"
                            required
                            className="bg-black/20 border-white/10 text-white"
                          />
                        </div>

                        <div className="flex items-center space-x-2 pt-4">
                          <Switch id="featured" checked={formData.featured} onCheckedChange={handleSwitchChange} />
                          <Label htmlFor="featured" className="text-white">
                            Produto em Destaque
                          </Label>
                        </div>
                      </div>

                      <div className="space-y-4">
                        <div className="space-y-2">
                          <Label htmlFor="image_url" className="text-white">
                            Imagem do Produto
                          </Label>
                          <ImageUpload
                            onUploadComplete={(url) => setFormData((prev) => ({ ...prev, image_url: url }))}
                            productId={editingId || undefined}
                            currentImageUrl={formData.image_url}
                            folder="capas-produtos"
                          />
                        </div>

                        <div className="space-y-2 mt-6">
                          <Label className="text-white">Arquivo Digital</Label>
                          <FileUpload
                            onUploadComplete={handleFileUploadComplete}
                            folder="produtos-digitais"
                            acceptedFileTypes=".pdf,.epub,.mp3,.zip,.doc,.docx"
                          />
                          {formData.download_url && formData.file_name && (
                            <div className="mt-2 text-sm text-white/70">
                              Arquivo atual: {formData.file_name}
                              <Button
                                variant="link"
                                className="text-purple-400 hover:text-purple-300 p-0 h-auto ml-2"
                                onClick={() => window.open(formData.download_url, "_blank")}
                              >
                                Visualizar
                              </Button>
                            </div>
                          )}
                        </div>
                      </div>
                    </div>

                    <div className="flex justify-end gap-4">
                      <Button
                        type="button"
                        variant="outline"
                        className="border-white/10 text-white hover:bg-white/10"
                        onClick={() => {
                          resetForm()
                          setActiveTab("lista")
                        }}
                      >
                        Cancelar
                      </Button>
                      <Button
                        type="submit"
                        className="bg-gradient-to-r from-purple-600 to-blue-500 hover:from-purple-700 hover:to-blue-600 text-white"
                      >
                        <Save className="mr-2 h-4 w-4" />
                        {editingId ? "Atualizar Produto" : "Salvar Produto"}
                      </Button>
                    </div>
                  </form>
                </TabsContent>
              </Tabs>
            </CardContent>
          </Card>
        ) : (
          <Card className="border-white/10 bg-black/30 backdrop-blur-sm overflow-hidden">
            <CardHeader>
              <CardTitle className="text-white">Estatísticas</CardTitle>
              <CardDescription className="text-white/70">
                Visualize métricas e desempenho dos seus produtos digitais
              </CardDescription>
            </CardHeader>
            <CardContent>
              <div className="grid grid-cols-1 md:grid-cols-2 gap-6">
                <Card className="border-white/10 bg-black/20">
                  <CardHeader>
                    <CardTitle className="text-white text-lg">Downloads por Categoria</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {Object.entries(stats.categories).map(([category, count]) => (
                        <div key={category} className="flex items-center justify-between">
                          <div className="flex items-center gap-2">
                            {getCategoryIcon(category)}
                            <span className="text-white capitalize">{category}</span>
                          </div>
                          <div className="flex items-center gap-2">
                            <span className="text-white/70">{count} produtos</span>
                            <div className="w-24 h-2 bg-black/30 rounded-full overflow-hidden">
                              <div
                                className="h-full bg-gradient-to-r from-purple-600 to-blue-500"
                                style={{
                                  width: `${(count / stats.totalProducts) * 100}%`,
                                }}
                              ></div>
                            </div>
                          </div>
                        </div>
                      ))}
                    </div>
                  </CardContent>
                </Card>

                <Card className="border-white/10 bg-black/20">
                  <CardHeader>
                    <CardTitle className="text-white text-lg">Produtos Mais Baixados</CardTitle>
                  </CardHeader>
                  <CardContent>
                    <div className="space-y-4">
                      {produtos
                        .sort((a, b) => (b.download_count || 0) - (a.download_count || 0))
                        .slice(0, 5)
                        .map((produto) => (
                          <div key={produto.id} className="flex items-center justify-between">
                            <div className="flex items-center gap-2">
                              <div className="w-8 h-8 rounded overflow-hidden">
                                <img
                                  src={produto.image_url || "/placeholder.svg?height=32&width=32"}
                                  alt={produto.name}
                                  className="w-full h-full object-cover"
                                />
                              </div>
                              <span className="text-white truncate max-w-[150px]">{produto.name}</span>
                            </div>
                            <Badge variant="outline" className="border-white/20 text-white">
                              {produto.download_count} downloads
                            </Badge>
                          </div>
                        ))}
                    </div>
                  </CardContent>
                </Card>
              </div>
            </CardContent>
          </Card>
        )}
      </div>
    </main>
  )
}
